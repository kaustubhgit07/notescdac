#### Assignment & Introduction ####

#To run any command press Ctrl + Enter
#You can write a comment in the script by starting a line with the "#" sign
#A comment is not run by R when you press ctrl + Enter
#R is Case Sensitive
#rm(list = ls()) to clear environment
#cat("\014") to Clear Console
cat("\014")
rm(list = ls())
##Assignment
#rm(list = ls())
#cat("\014")
x = 2 #Created an Object having value 2
print(x)
x
class(x)
z = 4L
z
class(z)
print(x)
print(X)

X = 5
X
rm(list = ls())

print(x)
x
y <- 2
y
x
Z = "Hello"
print(Z)
#print
print("Hello World")

class(x)
class(y)
class(Z)
#### Vectors ####
#Types of Vectors

# Creating a sequence from 8 to 17.
v <- 8:17
v
print(v)

# Creating a sequence from 5.5 to 17.5.
v <- 5.5:17.5
print(v)
print(v)

# If the final element specified does not belong to the sequence 
#then it is discarded.
v <- 3.8:11.4
print(v)

#Using sequence (Seq.) operator
?seq
# Create vector with elements from 5 to 9 incrementing by 0.5
s <- seq(5, 9, by = 0.5)
length(s)
print(s)
?seq
# Create vector with elements from 10 to 20 incrementing by 0.1
# print even number between 10 to 20 
#pront multiple of 7 from 7 to 100
#Using the c() function
### VECTORS

v = c(14,26,38,30) ### use c() to store several values in one variable
v
class(v)
length(v)
v[1]
v[1:3]
v[2] = 27
v_1 <- c(12.111,12.2)

v_1 = as.integer(v_1)
class(v_1)
v_2= c("Hello","Good morning","Nice to meet you","Me too")
v_2
class(v_2)
v_2[1]
v_2[1:2]
v_2[2:3]

v_2[1] <- "A"
v_2

v_3 = c(10,20,30,"Hello")
class(v_3)
grade <- c("A","B","c","D","E")
class(grade)
grade <- as.factor(grade)
grade <- as.character(grade)
class(grade)
class(v_1)
class(v)
class(v_2)
class(v_3)


#The non-character values are coerced
#to character type if one of the elements is a character.
# The logical and numeric values are converted to characters.
s <- c('apple','red',5,TRUE)
print(s)
class(s)
s[1] #Print first value
s[4] #Print fourth value

#Accessing vector elements
#You can access an individual element of a vector by its position (or "index"), 
#indicated using square brackets.
#In R, the first element has an index of 1

grade <- c("A","B","c","D","E")
grade[5] <- "O" #update the fifth element from "E" to "O"
# Call 3rd value of v
v[3]

g = c(7,9,0,TRUE)
g
class(g) #numeric
letters
LETTERS
#You can also change the elements of a vector using the same notation 
#as you use to access them:
##create a vector and store first 5 multiple of 5,first 5 multiple of 7 & first 5 multiple of 16 in it.
v[1] <- 5

#You can access multiple elements of a vector by specifying a vector of element indices
#Inside the square brackets.
v <- c(10,12,14,16,18,20,22,24,26,28,30,32)
length(v) #to check the length of vector
rev(v)
?rev
v[c(1,2)] #First & Second element of vector v
v[c(1,5,10)]
v[1:3] #First 3 elements

rev(v) #Print the reverse
v[-1] #remove first element
v_updated = v[-1]
v[c(-1:-2)]
dummy <- v[c(-1:-3)]

Roll <- c(1:20)
Roll[c(5,10,15,20)]
Roll_5 <- Roll[c(5,10,15,20)]

Roll <- c(1:100)
seq(5,100,5)
Roll[seq(5,100,5)]
Roll_5 <- Roll[seq(5,100,5)]
Roll_5

#Create a vector "F" store any 50 elements in it
#then create another vector "J" and store random 5 
#positions in it and then access elements from F
# with specified position in J.


a <- 'a'
class(a)
b <- 'bcd'
class(b)

v <- seq(6,12, by = 2)
v

m <- seq(12,6, by = -2)
m[-1]
m[-1:-3]

v[2]=17
v[-1]
v[-1:-3:-5]
c <- v[! v %in% c(14,18)]

v
#Logical Data Type
l <- T
class(l)
l_1 <- TRUE
class(l_1)

l_2 <- "TRUE"
class(l_2)


#Numeric Data Type
Num1 = 63.5
class(Num1)

#Integer Data Type
Num2 = 63L
class(Num2)

#Complex data type
comp1 = 3+2i
class(comp1)


#### Operators ####
#Arithmetic Operators
x <- 4
y <- 17

#Addition
x+y
#Subtraction
x-y
#Multiplication
x*y
#Division
y/x
#Integer Division
y%/%x
#Modulus(Remainder From Division)
y%%x
#Exponent
y^x

####
x_1 <- c(1,2,3,4)
y_1 <- c(5,6,7,8)

#Addition
x_1+y_1
#Subtraction
x_1-y_1
#Multiplication
x_1*y_1
#Division
y_1/x_1
#Integer Division
y_1%/%x_1
#Modulus(Remainder From Division)
y_1%%x_1
#Exponent
y_1^x_1

##

x_1 <- c(1,2,3,4)
y_1 <- c(5,6,7)

#Addition
x_1+y_1
#Subtraction
x_1-y_1
#Multiplication
x_1*y_1
#Division
y_1/x_1
#Integer Division
y_1%/%x_1
#Modulus(Remainder From Division)
y_1%%x_1
#Exponent
y_1^x_1


#
x_1 <- c(1,2,3,4,5,6)
y_1 <- c(5,6,7)

#Addition
x_1+y_1
#Subtraction
x_1-y_1
#Multiplication
x_1*y_1
#Division
y_1/x_1
#Integer Division
y_1%/%x_1
#Modulus(Remainder From Division)
y_1%%x_1
#Exponent
y_1^x_1

#Relational Operators


x <- 18
y <- 17

#Less than
x<y
#Greater than
x>y
#Less than or equal to
x<=9
#Greater than or equal to
y>=17
#Equal to
y == 17

#Not equal to
x != 18

x_1 <- c(17,18,19,20)
y_1 <- c(17,18,19,20)

#Less than
x_1<y_1
#Greater than
x_1>y_1
#Less than or equal to
x_1<=9
#Greater than or equal to
y_1>=17
#Equal to
y_1 == 17

#Not equal to
x_1 != 18


z <- c(1,3,T)
class(z)


#Logical Operators
#Zero is considered as FALSE and non-zero numbers are taken as TRUE
#Operators & and | perform element-wise operation 

#But && and || examines only the first element of the operands resulting into a single length logical vector.

x <- c(TRUE,FALSE,0,8)
y <- c(TRUE,FALSE,FALSE,TRUE)

a <- c(1,1,0,1)
b <- c(0,1,0,1)
class(x)
class(y)
!a


#Logical NOT
!x
#Element-wise logical AND
x&y
#Logical AND
x&&y
#Element-wise logical OR
x|y
#Logical OR
x||y

#Miscellanous Operator

#This operator is used to identify if an element belongs to a vector.
v1 <- 2
v2 <- 12
t <- 1:10
print(v1 %in% t) 
print(v2 %in% t) 

s <- "b"
vowel <- c("a","e","i","o","u")
s %in% vowel

#Take input from the user and check whether it is vowel or not


#This operator is used to multiply a matrix 

M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
t = M %*% t(M)
print(t)

M = matrix( c(2,6,5,1,10,4,1,2,3), nrow = 3,ncol = 3,byrow = TRUE)
M1 = matrix( c(1,6,5,1,10,4,1,2,3), nrow = 3,ncol = 3,byrow = TRUE)
t = M %*% M1
#### Data Objects ####
#### MATRICES ####
?matrix
v <- c(10,20,30,40)
matrix(v)
# Create matrix with values from my_vector, 2 rows and 2 columns
#M = matrix(v,nrow=2,ncol=2,dimnames = list(c("A","B"),c("X","Y")))
M = matrix(v,nrow=2,ncol=2)
M = matrix(v,nrow=2,ncol=2,byrow = T)
# Call
M
M_2 = matrix(1:9, nrow= 3, ncol = 3, byrow = FALSE)
M_3 = matrix(1:9, nrow= 3, ncol = 3, byrow = TRUE)
M_3

# Create vector with 9 integers from 1 to 9
1:9


M_2 = matrix(1:9, nrow= 3, ncol = 3)
M_2


# Access value on second row, second column
M_2[2,2]

# Access value on first row, second column
M_2[1,2]

# Access value on Third row, First column
M_2[3,1]
# Access second row
M_2[2,] 


# Access second column
M_2[,2]

# Access sub-matrix with components on both first 2 rows and first 2 columns
M_2[1:2,1:2]

# Access sub-matrix with components that are not on 3rd row and 3rd column
M_2[-3,-3]

#Transpose of Matrix
t(M_2)

###Sir what if we want a specific no. of columns and don't know the no. of rows.... as about high no. of elements?
M_2 = matrix(1:26, ncol = 3)
M_2


#Write a R program to create two 2*3 matrix and add,subtract
#multiply,and divide the matrix.

#Acessing rownames & Colnames
rownames(M)
colnames(M)

#Update rownames  & Colnames

rownames(M) <- c("Rohit","Virat")
colnames(M) <- c("Stokes","Root")

#creating Diagonal matrix
?diag

D = diag(c(5,3,3),3,3)

D = diag(c(1,1,1),3,3)

I = diag(2,3,3)

M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
t = M %*% t(M)
print(t)

M = matrix( c(2,6,5,1,10,4,1,2,3), nrow = 3,ncol = 3,byrow = TRUE)
M1 = matrix( c(1,6,5,1,10,4,1,2,3), nrow = 3,ncol = 3,byrow = TRUE)
t = M %*% M1

#create a vector ('hello','i','am',24,50,60,45,'rrr'), 
  #check if 'am' character is present in the vector or not. 
  #and create the matrix of the same vector having 2 rows and 4 columns.

d=c('hello','i','am',24,50,60,45,'rrr')

'am' %in% d

matrix(d,nrow=2,ncol=4,byrow=T)